{
    "address": "0x9b4a8120DF90f14c8a16c5Bf48dB354efA48716b",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountedFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xf98b51602aed070d37e1ca14e12db67b65fb8a4f19a1eab2b40bc3a8697725a8",
    "receipt": {
        "to": null,
        "from": "0x5313b2dDB663BB9e64f20Ab8c81fAF3A96a1C207",
        "contractAddress": "0x9b4a8120DF90f14c8a16c5Bf48dB354efA48716b",
        "transactionIndex": 23,
        "gasUsed": "981829",
        "logsBloom": "0x
        "blockHash": "0x752557c982c7e4277befed6758958eebd15dba1ebf94d8d2757cad6167695d26",
        "transactionHash": "0xf98b51602aed070d37e1ca14e12db67b65fb8a4f19a1eab2b40bc3a8697725a8",
        "logs": [],
        "blockNumber": 8619934,
        "cumulativeGasUsed": "4706499",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"],
    "numDeployments": 2,
    "solcInputHash": "a1e71745c021f6d8dd604b98123a1855",
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountedFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ahdrahees\",\"details\":\"This implement price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implement price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function fund this contarct\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//1. Pragma statements\\npragma solidity ^0.8.0;\\n\\n//2. Import statements\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//3. Error codes\\nerror FundMe__NotOwner();\\n\\n//4. Interfaces, 5. Libraries, 6. Contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author ahdrahees\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implement price feeds as our library\\n */\\ncontract FundMe {\\n    //a. Type declarations\\n    using PriceConverter for uint256; // attaching library into uint256\\n\\n    //b. State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // 1 * 10**18\\n    // 21,393 gas- constant = 21393 * 12 == 0.31062636 usd\\n    //23,493 gas =  23493 * 12000000000= 0.000281916 eth= 0.34111836 usd - without constant var\\n\\n    address[] private s_funders; // s_ indicate this will be storage variable ( convection or style, practices)\\n    mapping(address => uint256) private s_addressToAmountedFunded;\\n\\n    address private immutable i_owner;\\n\\n    //23644 gas-\\n    // 21508 gas- immutable\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //c. Events, d. Errors, e. Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");       // to check the owner of the contract\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; // continue rest of the code in the withdraw() if the require is true\\n    }\\n\\n    //f. Functions\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function fund this contarct\\n     * @dev This implement price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough ETH!\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountedFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountedFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0); // reset the array funders\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call withdraw failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders; // memory will be cheaper to read\\n        // mapping's can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountedFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // (bool callSuccess, ) = payable(msg.sender).call{\\n        //     value: address(this).balance\\n        // }(\\\"\\\");\\n        // require(callSuccess, \\\"Call withdraw failed\\\");\\n\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountedFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountedFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x0e3d607f2af080f2ebccf31e5f50c021dc2bace36896b87f8803373776522ae7\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x4a68d63452311c48f90ce37f49f1af85c1d11f482d600fe9405fa3b7989e2308\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011e3380380620011e383398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161106362000180600039600081816101ef0152818161043e015281816105c901526107bf01526110636000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063bea62930146101695761007b565b80633a7b6c74146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a4d565b6101a6565b6040516100b49190610abb565b60405180910390f35b3480156100c957600080fd5b506100d26101ed565b005b3480156100e057600080fd5b506100e961042d565b6040516100f69190610ae5565b60405180910390f35b34801561010b57600080fd5b5061011461043a565b6040516101219190610abb565b60405180910390f35b34801561013657600080fd5b5061013f610462565b60405161014c9190610b5f565b60405180910390f35b61015d61048c565b005b6101676105c7565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ba6565b610855565b60405161019d9190610ae5565b60405180910390f35b60008082815481106101bb576101ba610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610272576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031d57600080828154811061029757610296610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031590610c31565b915050610275565b50600067ffffffffffffffff81111561033957610338610c79565b5b6040519080825280602002602001820160405280156103675781602001602082028036833780820191505090505b506000908051906020019061037d92919061096b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a490610cd9565b60006040518083038185875af1925050503d80600081146103e1576040519150601f19603f3d011682016040523d82523d6000602084013e6103e6565b606091505b505090508061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190610d4b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089e90919063ffffffff16565b101561050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610db7565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105be9190610dd7565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610685575b5050505050905060005b815181101561075a5760008282815181106106f7576106f6610bd3565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075290610c31565b9150506106d9565b50600067ffffffffffffffff81111561077657610775610c79565b5b6040519080825280602002602001820160405280156107a45781602001602082028036833780820191505090505b50600090805190602001906107ba92919061096b565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080190610cd9565b60006040518083038185875af1925050503d806000811461083e576040519150601f19603f3d011682016040523d82523d6000602084013e610843565b606091505b505090508061085157600080fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806108aa836108da565b90506000670de0b6b3a764000085836108c39190610e0b565b6108cd9190610e7c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c9190610f3a565b5050509150506402540be400816109639190610fb5565b915050919050565b8280548282559060005260206000209081019282156109e4579160200282015b828111156109e35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098b565b5b5090506109f191906109f5565b5090565b5b80821115610a0e5760008160009055506001016109f6565b5090565b600080fd5b6000819050919050565b610a2a81610a17565b8114610a3557600080fd5b50565b600081359050610a4781610a21565b92915050565b600060208284031215610a6357610a62610a12565b5b6000610a7184828501610a38565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa582610a7a565b9050919050565b610ab581610a9a565b82525050565b6000602082019050610ad06000830184610aac565b92915050565b610adf81610a17565b82525050565b6000602082019050610afa6000830184610ad6565b92915050565b6000819050919050565b6000610b25610b20610b1b84610a7a565b610b00565b610a7a565b9050919050565b6000610b3782610b0a565b9050919050565b6000610b4982610b2c565b9050919050565b610b5981610b3e565b82525050565b6000602082019050610b746000830184610b50565b92915050565b610b8381610a9a565b8114610b8e57600080fd5b50565b600081359050610ba081610b7a565b92915050565b600060208284031215610bbc57610bbb610a12565b5b6000610bca84828501610b91565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3c82610a17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c6e57610c6d610c02565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc3600083610ca8565b9150610cce82610cb3565b600082019050919050565b6000610ce482610cb6565b9150819050919050565b600082825260208201905092915050565b7f43616c6c207769746864726177206661696c6564000000000000000000000000600082015250565b6000610d35601483610cee565b9150610d4082610cff565b602082019050919050565b60006020820190508181036000830152610d6481610d28565b9050919050565b7f4469646e27742073656e6420656e6f7567682045544821000000000000000000600082015250565b6000610da1601783610cee565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b6000610de282610a17565b9150610ded83610a17565b9250828201905080821115610e0557610e04610c02565b5b92915050565b6000610e1682610a17565b9150610e2183610a17565b9250828202610e2f81610a17565b91508282048414831517610e4657610e45610c02565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8782610a17565b9150610e9283610a17565b925082610ea257610ea1610e4d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ecc81610ead565b8114610ed757600080fd5b50565b600081519050610ee981610ec3565b92915050565b6000819050919050565b610f0281610eef565b8114610f0d57600080fd5b50565b600081519050610f1f81610ef9565b92915050565b600081519050610f3481610a21565b92915050565b600080600080600060a08688031215610f5657610f55610a12565b5b6000610f6488828901610eda565b9550506020610f7588828901610f10565b9450506040610f8688828901610f25565b9350506060610f9788828901610f25565b9250506080610fa888828901610eda565b9150509295509295909350565b6000610fc082610eef565b9150610fcb83610eef565b9250828202610fd981610eef565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561101157611010610c02565b5b828205841483151761102657611025610c02565b5b509291505056fea2646970667358221220671eaa34dbb9436b631417e6b9853f2c38f934ed9f49421446e2476c7713fb2f64736f6c63430008110033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063bea62930146101695761007b565b80633a7b6c74146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a4d565b6101a6565b6040516100b49190610abb565b60405180910390f35b3480156100c957600080fd5b506100d26101ed565b005b3480156100e057600080fd5b506100e961042d565b6040516100f69190610ae5565b60405180910390f35b34801561010b57600080fd5b5061011461043a565b6040516101219190610abb565b60405180910390f35b34801561013657600080fd5b5061013f610462565b60405161014c9190610b5f565b60405180910390f35b61015d61048c565b005b6101676105c7565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ba6565b610855565b60405161019d9190610ae5565b60405180910390f35b60008082815481106101bb576101ba610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610272576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031d57600080828154811061029757610296610bd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031590610c31565b915050610275565b50600067ffffffffffffffff81111561033957610338610c79565b5b6040519080825280602002602001820160405280156103675781602001602082028036833780820191505090505b506000908051906020019061037d92919061096b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a490610cd9565b60006040518083038185875af1925050503d80600081146103e1576040519150601f19603f3d011682016040523d82523d6000602084013e6103e6565b606091505b505090508061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190610d4b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089e90919063ffffffff16565b101561050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610db7565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105be9190610dd7565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610685575b5050505050905060005b815181101561075a5760008282815181106106f7576106f6610bd3565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075290610c31565b9150506106d9565b50600067ffffffffffffffff81111561077657610775610c79565b5b6040519080825280602002602001820160405280156107a45781602001602082028036833780820191505090505b50600090805190602001906107ba92919061096b565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080190610cd9565b60006040518083038185875af1925050503d806000811461083e576040519150601f19603f3d011682016040523d82523d6000602084013e610843565b606091505b505090508061085157600080fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806108aa836108da565b90506000670de0b6b3a764000085836108c39190610e0b565b6108cd9190610e7c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c9190610f3a565b5050509150506402540be400816109639190610fb5565b915050919050565b8280548282559060005260206000209081019282156109e4579160200282015b828111156109e35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098b565b5b5090506109f191906109f5565b5090565b5b80821115610a0e5760008160009055506001016109f6565b5090565b600080fd5b6000819050919050565b610a2a81610a17565b8114610a3557600080fd5b50565b600081359050610a4781610a21565b92915050565b600060208284031215610a6357610a62610a12565b5b6000610a7184828501610a38565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa582610a7a565b9050919050565b610ab581610a9a565b82525050565b6000602082019050610ad06000830184610aac565b92915050565b610adf81610a17565b82525050565b6000602082019050610afa6000830184610ad6565b92915050565b6000819050919050565b6000610b25610b20610b1b84610a7a565b610b00565b610a7a565b9050919050565b6000610b3782610b0a565b9050919050565b6000610b4982610b2c565b9050919050565b610b5981610b3e565b82525050565b6000602082019050610b746000830184610b50565b92915050565b610b8381610a9a565b8114610b8e57600080fd5b50565b600081359050610ba081610b7a565b92915050565b600060208284031215610bbc57610bbb610a12565b5b6000610bca84828501610b91565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3c82610a17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c6e57610c6d610c02565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc3600083610ca8565b9150610cce82610cb3565b600082019050919050565b6000610ce482610cb6565b9150819050919050565b600082825260208201905092915050565b7f43616c6c207769746864726177206661696c6564000000000000000000000000600082015250565b6000610d35601483610cee565b9150610d4082610cff565b602082019050919050565b60006020820190508181036000830152610d6481610d28565b9050919050565b7f4469646e27742073656e6420656e6f7567682045544821000000000000000000600082015250565b6000610da1601783610cee565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b6000610de282610a17565b9150610ded83610a17565b9250828201905080821115610e0557610e04610c02565b5b92915050565b6000610e1682610a17565b9150610e2183610a17565b9250828202610e2f81610a17565b91508282048414831517610e4657610e45610c02565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8782610a17565b9150610e9283610a17565b925082610ea257610ea1610e4d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ecc81610ead565b8114610ed757600080fd5b50565b600081519050610ee981610ec3565b92915050565b6000819050919050565b610f0281610eef565b8114610f0d57600080fd5b50565b600081519050610f1f81610ef9565b92915050565b600081519050610f3481610a21565b92915050565b600080600080600060a08688031215610f5657610f55610a12565b5b6000610f6488828901610eda565b9550506020610f7588828901610f10565b9450506040610f8688828901610f25565b9350506060610f9788828901610f25565b9250506080610fa888828901610eda565b9150509295509295909350565b6000610fc082610eef565b9150610fcb83610eef565b9250828202610fd981610eef565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561101157611010610c02565b5b828205841483151761102657611025610c02565b5b509291505056fea2646970667358221220671eaa34dbb9436b631417e6b9853f2c38f934ed9f49421446e2476c7713fb2f64736f6c63430008110033",
    "devdoc": {
        "author": "ahdrahees",
        "details": "This implement price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implement price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function fund this contarct"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 66,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountedFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
